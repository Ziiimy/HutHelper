package com.gaop.huthelperdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gaop.huthelperdao.Lesson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESSON".
*/
public class LessonDao extends AbstractDao<Lesson, Long> {

    public static final String TABLENAME = "LESSON";

    /**
     * Properties of entity Lesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xh = new Property(1, String.class, "xh", false, "XH");
        public final static Property Dsz = new Property(2, String.class, "dsz", false, "DSZ");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Teacher = new Property(4, String.class, "teacher", false, "TEACHER");
        public final static Property Room = new Property(5, String.class, "room", false, "ROOM");
        public final static Property Xqj = new Property(6, Integer.class, "xqj", false, "XQJ");
        public final static Property Djj = new Property(7, Integer.class, "djj", false, "DJJ");
        public final static Property Qsz = new Property(8, Integer.class, "qsz", false, "QSZ");
        public final static Property Jsz = new Property(9, Integer.class, "jsz", false, "JSZ");
        public final static Property Index = new Property(10, String.class, "index", false, "INDEX");
        public final static Property Addbyuser = new Property(11, Boolean.class, "addbyuser", false, "ADDBYUSER");
    };


    public LessonDao(DaoConfig config) {
        super(config);
    }
    
    public LessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"XH\" TEXT," + // 1: xh
                "\"DSZ\" TEXT," + // 2: dsz
                "\"NAME\" TEXT," + // 3: name
                "\"TEACHER\" TEXT," + // 4: teacher
                "\"ROOM\" TEXT," + // 5: room
                "\"XQJ\" INTEGER," + // 6: xqj
                "\"DJJ\" INTEGER," + // 7: djj
                "\"QSZ\" INTEGER," + // 8: qsz
                "\"JSZ\" INTEGER," + // 9: jsz
                "\"INDEX\" TEXT," + // 10: index
                "\"ADDBYUSER\" INTEGER);"); // 11: addbyuser
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(2, xh);
        }
 
        String dsz = entity.getDsz();
        if (dsz != null) {
            stmt.bindString(3, dsz);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(5, teacher);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(6, room);
        }
 
        Integer xqj = entity.getXqj();
        if (xqj != null) {
            stmt.bindLong(7, xqj);
        }
 
        Integer djj = entity.getDjj();
        if (djj != null) {
            stmt.bindLong(8, djj);
        }
 
        Integer qsz = entity.getQsz();
        if (qsz != null) {
            stmt.bindLong(9, qsz);
        }
 
        Integer jsz = entity.getJsz();
        if (jsz != null) {
            stmt.bindLong(10, jsz);
        }
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(11, index);
        }
 
        Boolean addbyuser = entity.getAddbyuser();
        if (addbyuser != null) {
            stmt.bindLong(12, addbyuser ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Lesson readEntity(Cursor cursor, int offset) {
        Lesson entity = new Lesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dsz
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // teacher
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // room
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // xqj
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // djj
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // qsz
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // jsz
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // index
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // addbyuser
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Lesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDsz(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTeacher(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setXqj(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDjj(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setQsz(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setJsz(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIndex(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddbyuser(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Lesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Lesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
