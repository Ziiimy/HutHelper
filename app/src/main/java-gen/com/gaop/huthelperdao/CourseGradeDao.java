package com.gaop.huthelperdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gaop.huthelperdao.CourseGrade;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_GRADE".
*/
public class CourseGradeDao extends AbstractDao<CourseGrade, Long> {

    public static final String TABLENAME = "COURSE_GRADE";

    /**
     * Properties of entity CourseGrade.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property XN = new Property(1, String.class, "XN", false, "XN");
        public final static Property XQ = new Property(2, String.class, "XQ", false, "XQ");
        public final static Property XKKH = new Property(3, String.class, "XKKH", false, "XKKH");
        public final static Property KCMC = new Property(4, String.class, "KCMC", false, "KCMC");
        public final static Property XF = new Property(5, String.class, "XF", false, "XF");
        public final static Property CJ = new Property(6, String.class, "CJ", false, "CJ");
        public final static Property ZSCJ = new Property(7, String.class, "ZSCJ", false, "ZSCJ");
        public final static Property BKCJ = new Property(8, String.class, "BKCJ", false, "BKCJ");
        public final static Property JD = new Property(9, String.class, "JD", false, "JD");
        public final static Property CXBJ = new Property(10, String.class, "CXBJ", false, "CXBJ");
        public final static Property KCXZ = new Property(11, String.class, "KCXZ", false, "KCXZ");
    };


    public CourseGradeDao(DaoConfig config) {
        super(config);
    }
    
    public CourseGradeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_GRADE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"XN\" TEXT," + // 1: XN
                "\"XQ\" TEXT," + // 2: XQ
                "\"XKKH\" TEXT," + // 3: XKKH
                "\"KCMC\" TEXT," + // 4: KCMC
                "\"XF\" TEXT," + // 5: XF
                "\"CJ\" TEXT," + // 6: CJ
                "\"ZSCJ\" TEXT," + // 7: ZSCJ
                "\"BKCJ\" TEXT," + // 8: BKCJ
                "\"JD\" TEXT," + // 9: JD
                "\"CXBJ\" TEXT," + // 10: CXBJ
                "\"KCXZ\" TEXT);"); // 11: KCXZ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_GRADE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CourseGrade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String XN = entity.getXN();
        if (XN != null) {
            stmt.bindString(2, XN);
        }
 
        String XQ = entity.getXQ();
        if (XQ != null) {
            stmt.bindString(3, XQ);
        }
 
        String XKKH = entity.getXKKH();
        if (XKKH != null) {
            stmt.bindString(4, XKKH);
        }
 
        String KCMC = entity.getKCMC();
        if (KCMC != null) {
            stmt.bindString(5, KCMC);
        }
 
        String XF = entity.getXF();
        if (XF != null) {
            stmt.bindString(6, XF);
        }
 
        String CJ = entity.getCJ();
        if (CJ != null) {
            stmt.bindString(7, CJ);
        }
 
        String ZSCJ = entity.getZSCJ();
        if (ZSCJ != null) {
            stmt.bindString(8, ZSCJ);
        }
 
        String BKCJ = entity.getBKCJ();
        if (BKCJ != null) {
            stmt.bindString(9, BKCJ);
        }
 
        String JD = entity.getJD();
        if (JD != null) {
            stmt.bindString(10, JD);
        }
 
        String CXBJ = entity.getCXBJ();
        if (CXBJ != null) {
            stmt.bindString(11, CXBJ);
        }
 
        String KCXZ = entity.getKCXZ();
        if (KCXZ != null) {
            stmt.bindString(12, KCXZ);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CourseGrade readEntity(Cursor cursor, int offset) {
        CourseGrade entity = new CourseGrade( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // XN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // XQ
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // XKKH
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // KCMC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // XF
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CJ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ZSCJ
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // BKCJ
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // JD
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CXBJ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // KCXZ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CourseGrade entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXQ(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXKKH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKCMC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setXF(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCJ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZSCJ(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBKCJ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setJD(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCXBJ(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKCXZ(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CourseGrade entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CourseGrade entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
