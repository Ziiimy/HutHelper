package com.gaop.huthelperdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gaop.huthelperdao.Exam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM".
*/
public class ExamDao extends AbstractDao<Exam, Long> {

    public static final String TABLENAME = "EXAM";

    /**
     * Properties of entity Exam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CourseName = new Property(1, String.class, "CourseName", false, "COURSE_NAME");
        public final static Property Starttime = new Property(2, String.class, "Starttime", false, "STARTTIME");
        public final static Property EndTime = new Property(3, String.class, "EndTime", false, "END_TIME");
        public final static Property Week_Num = new Property(4, String.class, "Week_Num", false, "WEEK__NUM");
        public final static Property Isset = new Property(5, String.class, "isset", false, "ISSET");
        public final static Property RoomName = new Property(6, String.class, "RoomName", false, "ROOM_NAME");
        public final static Property IsCx = new Property(7, Boolean.class, "isCx", false, "IS_CX");
    };


    public ExamDao(DaoConfig config) {
        super(config);
    }
    
    public ExamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COURSE_NAME\" TEXT," + // 1: CourseName
                "\"STARTTIME\" TEXT," + // 2: Starttime
                "\"END_TIME\" TEXT," + // 3: EndTime
                "\"WEEK__NUM\" TEXT," + // 4: Week_Num
                "\"ISSET\" TEXT," + // 5: isset
                "\"ROOM_NAME\" TEXT," + // 6: RoomName
                "\"IS_CX\" INTEGER);"); // 7: isCx
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Exam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CourseName = entity.getCourseName();
        if (CourseName != null) {
            stmt.bindString(2, CourseName);
        }
 
        String Starttime = entity.getStarttime();
        if (Starttime != null) {
            stmt.bindString(3, Starttime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
 
        String Week_Num = entity.getWeek_Num();
        if (Week_Num != null) {
            stmt.bindString(5, Week_Num);
        }
 
        String isset = entity.getIsset();
        if (isset != null) {
            stmt.bindString(6, isset);
        }
 
        String RoomName = entity.getRoomName();
        if (RoomName != null) {
            stmt.bindString(7, RoomName);
        }
 
        Boolean isCx = entity.getIsCx();
        if (isCx != null) {
            stmt.bindLong(8, isCx ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Exam readEntity(Cursor cursor, int offset) {
        Exam entity = new Exam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CourseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Starttime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EndTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Week_Num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isset
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RoomName
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isCx
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Exam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCourseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStarttime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeek_Num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsset(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoomName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsCx(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Exam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Exam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
