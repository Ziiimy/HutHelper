package com.gaop.huthelperdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gaop.huthelperdao.Grade;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE".
*/
public class GradeDao extends AbstractDao<Grade, Long> {

    public static final String TABLENAME = "GRADE";

    /**
     * Properties of entity Grade.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Allsf = new Property(1, Float.class, "allsf", false, "ALLSF");
        public final static Property Getsf = new Property(2, Float.class, "getsf", false, "GETSF");
        public final static Property Cxsf = new Property(3, Float.class, "cxsf", false, "CXSF");
        public final static Property Nopassxf = new Property(4, Float.class, "nopassxf", false, "NOPASSXF");
        public final static Property AvgScore = new Property(5, Float.class, "avgScore", false, "AVG_SCORE");
        public final static Property AvgJd = new Property(6, Float.class, "avgJd", false, "AVG_JD");
        public final static Property NoPassNum = new Property(7, Integer.class, "noPassNum", false, "NO_PASS_NUM");
        public final static Property AllNum = new Property(8, Integer.class, "allNum", false, "ALL_NUM");
    };


    public GradeDao(DaoConfig config) {
        super(config);
    }
    
    public GradeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ALLSF\" REAL," + // 1: allsf
                "\"GETSF\" REAL," + // 2: getsf
                "\"CXSF\" REAL," + // 3: cxsf
                "\"NOPASSXF\" REAL," + // 4: nopassxf
                "\"AVG_SCORE\" REAL," + // 5: avgScore
                "\"AVG_JD\" REAL," + // 6: avgJd
                "\"NO_PASS_NUM\" INTEGER," + // 7: noPassNum
                "\"ALL_NUM\" INTEGER);"); // 8: allNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Grade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float allsf = entity.getAllsf();
        if (allsf != null) {
            stmt.bindDouble(2, allsf);
        }
 
        Float getsf = entity.getGetsf();
        if (getsf != null) {
            stmt.bindDouble(3, getsf);
        }
 
        Float cxsf = entity.getCxsf();
        if (cxsf != null) {
            stmt.bindDouble(4, cxsf);
        }
 
        Float nopassxf = entity.getNopassxf();
        if (nopassxf != null) {
            stmt.bindDouble(5, nopassxf);
        }
 
        Float avgScore = entity.getAvgScore();
        if (avgScore != null) {
            stmt.bindDouble(6, avgScore);
        }
 
        Float avgJd = entity.getAvgJd();
        if (avgJd != null) {
            stmt.bindDouble(7, avgJd);
        }
 
        Integer noPassNum = entity.getNoPassNum();
        if (noPassNum != null) {
            stmt.bindLong(8, noPassNum);
        }
 
        Integer allNum = entity.getAllNum();
        if (allNum != null) {
            stmt.bindLong(9, allNum);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Grade readEntity(Cursor cursor, int offset) {
        Grade entity = new Grade( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // allsf
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // getsf
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // cxsf
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // nopassxf
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // avgScore
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // avgJd
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // noPassNum
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // allNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Grade entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAllsf(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setGetsf(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setCxsf(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setNopassxf(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setAvgScore(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAvgJd(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setNoPassNum(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAllNum(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Grade entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Grade entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
