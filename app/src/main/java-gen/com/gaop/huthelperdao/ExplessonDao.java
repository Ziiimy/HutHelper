package com.gaop.huthelperdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gaop.huthelperdao.Explesson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPLESSON".
*/
public class ExplessonDao extends AbstractDao<Explesson, Long> {

    public static final String TABLENAME = "EXPLESSON";

    /**
     * Properties of entity Explesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Teacher = new Property(1, String.class, "teacher", false, "TEACHER");
        public final static Property Lesson = new Property(2, String.class, "lesson", false, "LESSON");
        public final static Property Obj = new Property(3, String.class, "obj", false, "OBJ");
        public final static Property Locate = new Property(4, String.class, "locate", false, "LOCATE");
        public final static Property Weeks_no = new Property(5, String.class, "weeks_no", false, "WEEKS_NO");
        public final static Property Week = new Property(6, String.class, "week", false, "WEEK");
        public final static Property Lesson_no = new Property(7, String.class, "lesson_no", false, "LESSON_NO");
        public final static Property Period = new Property(8, String.class, "period", false, "PERIOD");
        public final static Property Real_time = new Property(9, String.class, "real_time", false, "REAL_TIME");
    };


    public ExplessonDao(DaoConfig config) {
        super(config);
    }
    
    public ExplessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPLESSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TEACHER\" TEXT," + // 1: teacher
                "\"LESSON\" TEXT," + // 2: lesson
                "\"OBJ\" TEXT," + // 3: obj
                "\"LOCATE\" TEXT," + // 4: locate
                "\"WEEKS_NO\" TEXT," + // 5: weeks_no
                "\"WEEK\" TEXT," + // 6: week
                "\"LESSON_NO\" TEXT," + // 7: lesson_no
                "\"PERIOD\" TEXT," + // 8: period
                "\"REAL_TIME\" TEXT);"); // 9: real_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPLESSON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Explesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(2, teacher);
        }
 
        String lesson = entity.getLesson();
        if (lesson != null) {
            stmt.bindString(3, lesson);
        }
 
        String obj = entity.getObj();
        if (obj != null) {
            stmt.bindString(4, obj);
        }
 
        String locate = entity.getLocate();
        if (locate != null) {
            stmt.bindString(5, locate);
        }
 
        String weeks_no = entity.getWeeks_no();
        if (weeks_no != null) {
            stmt.bindString(6, weeks_no);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(7, week);
        }
 
        String lesson_no = entity.getLesson_no();
        if (lesson_no != null) {
            stmt.bindString(8, lesson_no);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(9, period);
        }
 
        String real_time = entity.getReal_time();
        if (real_time != null) {
            stmt.bindString(10, real_time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Explesson readEntity(Cursor cursor, int offset) {
        Explesson entity = new Explesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // teacher
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lesson
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // obj
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // locate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // weeks_no
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // week
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lesson_no
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // period
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // real_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Explesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTeacher(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLesson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setObj(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeeks_no(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeek(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLesson_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPeriod(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReal_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Explesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Explesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
