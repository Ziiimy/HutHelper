package com.gaop.huthelperdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gaop.huthelperdao.Ranking;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RANKING".
*/
public class RankingDao extends AbstractDao<Ranking, Long> {

    public static final String TABLENAME = "RANKING";

    /**
     * Properties of entity Ranking.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property XN = new Property(1, String.class, "XN", false, "XN");
        public final static Property XQ = new Property(2, String.class, "XQ", false, "XQ");
        public final static Property ZJD = new Property(3, String.class, "ZJD", false, "ZJD");
        public final static Property MC = new Property(4, Integer.class, "MC", false, "MC");
        public final static Property ISXN = new Property(5, Boolean.class, "ISXN", false, "ISXN");
        public final static Property ISBJ = new Property(6, Boolean.class, "ISBJ", false, "ISBJ");
    };


    public RankingDao(DaoConfig config) {
        super(config);
    }
    
    public RankingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RANKING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"XN\" TEXT," + // 1: XN
                "\"XQ\" TEXT," + // 2: XQ
                "\"ZJD\" TEXT," + // 3: ZJD
                "\"MC\" INTEGER," + // 4: MC
                "\"ISXN\" INTEGER," + // 5: ISXN
                "\"ISBJ\" INTEGER);"); // 6: ISBJ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RANKING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ranking entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String XN = entity.getXN();
        if (XN != null) {
            stmt.bindString(2, XN);
        }
 
        String XQ = entity.getXQ();
        if (XQ != null) {
            stmt.bindString(3, XQ);
        }
 
        String ZJD = entity.getZJD();
        if (ZJD != null) {
            stmt.bindString(4, ZJD);
        }
 
        Integer MC = entity.getMC();
        if (MC != null) {
            stmt.bindLong(5, MC);
        }
 
        Boolean ISXN = entity.getISXN();
        if (ISXN != null) {
            stmt.bindLong(6, ISXN ? 1L: 0L);
        }
 
        Boolean ISBJ = entity.getISBJ();
        if (ISBJ != null) {
            stmt.bindLong(7, ISBJ ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ranking readEntity(Cursor cursor, int offset) {
        Ranking entity = new Ranking( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // XN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // XQ
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ZJD
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // MC
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // ISXN
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // ISBJ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ranking entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXQ(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZJD(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMC(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setISXN(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setISBJ(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ranking entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ranking entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
