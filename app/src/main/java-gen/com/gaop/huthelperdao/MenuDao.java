package com.gaop.huthelperdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gaop.huthelperdao.Menu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU".
*/
public class MenuDao extends AbstractDao<Menu, Long> {

    public static final String TABLENAME = "MENU";

    /**
     * Properties of entity Menu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, Integer.class, "index", false, "INDEX");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Msg = new Property(4, Integer.class, "msg", false, "MSG");
        public final static Property PicId = new Property(5, Integer.class, "picId", false, "PIC_ID");
        public final static Property IsMain = new Property(6, Boolean.class, "isMain", false, "IS_MAIN");
    };


    public MenuDao(DaoConfig config) {
        super(config);
    }
    
    public MenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INDEX\" INTEGER," + // 1: index
                "\"PATH\" TEXT," + // 2: path
                "\"TITLE\" TEXT," + // 3: title
                "\"MSG\" INTEGER," + // 4: msg
                "\"PIC_ID\" INTEGER," + // 5: picId
                "\"IS_MAIN\" INTEGER);"); // 6: isMain
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Menu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(2, index);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Integer msg = entity.getMsg();
        if (msg != null) {
            stmt.bindLong(5, msg);
        }
 
        Integer picId = entity.getPicId();
        if (picId != null) {
            stmt.bindLong(6, picId);
        }
 
        Boolean isMain = entity.getIsMain();
        if (isMain != null) {
            stmt.bindLong(7, isMain ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Menu readEntity(Cursor cursor, int offset) {
        Menu entity = new Menu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // msg
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // picId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isMain
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Menu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsg(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPicId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsMain(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Menu entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Menu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
